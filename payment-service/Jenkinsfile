pipeline {
    agent any
    tools {
        maven 'maven' // Ensure 'maven' matches the Maven installation name in Jenkins
    }
    environment {
        DEPLOYMENT_ENVIRONMENT = 'NO_DEPLOYMENT'
        DOCKERHUB_LOGINSERVER = ''
        APP_ENV = 'default'
        GLOBAL_ENVIRONMENT = ''
    }
    stages {
        stage('Determine Environment') {
            steps {
                echo 'Determine Environment'
                script {
                    // Determine whether this is a develop, staging or main build
                    switch (env.GIT_BRANCH) {
                        case 'develop':
                            GLOBAL_ENVIRONMENT = 'develop'
                            break
                        case 'staging':
                            GLOBAL_ENVIRONMENT = 'staging'
                            DOCKERHUB_LOGINSERVER = env.DOCKERHUB_STAGING_LOGINSERVER
                            break
                        case 'main':
                            GLOBAL_ENVIRONMENT = 'main'
                            DOCKERHUB_LOGINSERVER = env.DOCKERHUB_PROD_LOGINSERVER
                            break
                        default:
                            GLOBAL_ENVIRONMENT = 'NO_DEPLOYMENT'
                            break
                    }
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building..' + GLOBAL_ENVIRONMENT
                script {
                    if (GLOBAL_ENVIRONMENT == 'NO_DEPLOYMENT') {
                        currentBuild.result = 'ABORTED'
                        error('This is not develop, staging or main branch and should not be build')
                    } else {
                        echo "Hello, ${GLOBAL_ENVIRONMENT}."
                        switch (GLOBAL_ENVIRONMENT) {
                            case 'develop':
                                sh 'cd payment-service && mvn clean package -DskipTests'
                                sh 'cd payment-service'
                                break
                            case 'staging':
                                sh 'cd payment-service && mvn clean package'
                                sh 'ls -l target'
                                break
                            case 'production':
                                sh 'cd payment-service && mvn clean package'
                                sh 'ls -l target'
                                break
                            default:
                                echo 'No environment nothing to build'
                                break
                        }
                    }
                }
            }
        }
        stage('Publish image') {
            steps {
                script {
                     withCredentials([string(credentialsId: 'dockerhub-cred', variable: 'dockerhubpwd')]) {
                        echo "Building Docker image"
                        sh 'cd payment-service && docker build -t ujusophy/payment-service .'
                        sh "docker login -u ujusophy -p ${dockerhubpwd}"
                        sh "docker push ujusophy/payment-service"

                         echo "Image Published successfully"
                    }
                    
                    
                    
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarsql') {
                        echo "Running SonarQube analysis"
                        dir('payment-service') {
                            sh 'mvn sonar:sonar' // Ensure SonarQube analysis is properly configured
                        }
                    }
                }
            }
        }
    }
}


docker push image
